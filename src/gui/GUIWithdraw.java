package gui;

import bean.account.Account;
import bean.account.CheckingAccount;
import bean.account.SavingAccount;
import bean.account.SecurityAccount;
import bean.user.User;
import controller.AccountOverviewController;
import controller.CheckingAccountController;
import controller.SavingAccountController;
import controller.SecurityAccountController;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;

public class GUIWithdraw extends JFrame {

    private JComboBox accComboBox;
    private JTextField inputTxt;
    private JButton submitButton;
    private JPanel mainPanel;
    private User u;

    HashMap<String, Account> accMap;

    public GUIWithdraw(User u, GUIHomePage home) {
        this.u = u;
        setContentPane(mainPanel);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        pack();
        setVisible(false);

        AccountOverviewController controller = new AccountOverviewController(u.getUid(), u.getUsername());


        submitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Account account = accMap.get(accComboBox.getSelectedItem());
                double amountWithdraw = Double.parseDouble(inputTxt.getText());
                if (amountWithdraw <= 0) {
                    JOptionPane.showMessageDialog(null, "Please enter value greater than 0", "Error", JOptionPane.ERROR_MESSAGE);
                }
                if (account.getType() == Account.AccountType.SAVING) {
                    SavingAccountController savController = new SavingAccountController((SavingAccount) account);
                    if (!savController.withdraw(amountWithdraw)) {
                        JOptionPane.showMessageDialog(null, "Insufficient funds.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else if (account.getType() == Account.AccountType.SECURITY) {
                    CheckingAccountController ckController = new CheckingAccountController((CheckingAccount) account);
                    if (!ckController.withdraw(amountWithdraw)) {
                        JOptionPane.showMessageDialog(null, "Insufficient funds.", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else if (account.getType() == Account.AccountType.CHECKING) {
                    SecurityAccountController secController = new SecurityAccountController((SecurityAccount) account);
                    if (!secController.withdraw(amountWithdraw)) {
                        JOptionPane.showMessageDialog(null, "Insufficient funds.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "cannot withdraw money from loan account", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    public void update() {
        inputTxt.setText("");
        accComboBox.removeAllItems();
        accMap = getAccMap(u);
        for (String a : getAccKeys(accMap)) {
            accComboBox.addItem(a);
        }
    }


    public JPanel getMainPanel() {
        return mainPanel;
    }

    public static HashMap<String, Account> getAccMap(User u) {
        AccountOverviewController controller = new AccountOverviewController(u.getUid(), u.getUsername());
        java.util.List<Account> accounts = controller.getAccountList();
        HashMap<String, Account> accMap = new HashMap<>();
        for (Account a : accounts) {
            accMap.put(a.toString(), a);
        }
        return accMap;
    }

    public static String[] getAccKeys(HashMap<String, Account> accMap) {
        return accMap.keySet().toArray(new String[0]);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Please enter the withdraw amount:\n");
        mainPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Please choose the account to withdrawl from");
        mainPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        accComboBox = new JComboBox();
        mainPanel.add(accComboBox, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        inputTxt = new JTextField();
        mainPanel.add(inputTxt, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        submitButton = new JButton();
        submitButton.setText("Submit");
        mainPanel.add(submitButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
